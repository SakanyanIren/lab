#include <iostream> 
#include <cstring> 
#include <unistd.h> 
#include <arpa/inet.h> 
#include <sys/socket.h> 

#define PORT 8081 // Порт, с которым будет работать клиент
#define BUFFER_SIZE 1024 // Размер буфера для получения данных

int main() { 
    int sock = 0; 
    struct sockaddr_in server_address; // Структура для хранения адреса сервера
    char buffer[BUFFER_SIZE] = {0}; // Буфер для получения данных

    const char* client2_ip = "127.0.0.1";  // IP-адрес Client2 (сервер)

    // Создание сокета
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) { 
        perror("Не удалось создать сокет"); 
        return -1; 
    } 

    // Настройка структуры адреса сервера
    server_address.sin_family = AF_INET; // Семейство адресов (IPv4)
    server_address.sin_port = htons(PORT); // Установка порта сервера

    // Преобразование IP-адреса из текстового в двоичный формат
    if (inet_pton(AF_INET, client2_ip, &server_address.sin_addr) <= 0) { 
        perror("Неверный адрес или адрес не поддерживается"); 
        return -1; 
    } 

    // Подключение к серверу (Client2)
    if (connect(sock, (struct sockaddr*)&server_address, sizeof(server_address)) < 0) { 
        perror("Не удалось подключиться к серверу"); 
        return -1; 
    } 

    std::cout << "Подключено к Client2. Отправка сообщения...\n"; 

    // Отправка сообщения на сервер (Client2)
    const char* message = "Hello from Client1!"; 
    send(sock, message, strlen(message), 0); 
    std::cout << "Сообщение отправлено на Client2: " << message << std::endl; 

    // Чтение ответа от Client2
    int valread = read(sock, buffer, BUFFER_SIZE); 
    std::cout << "Получено от Client2: " << buffer << std::endl; 

    // Закрытие сокета
    close(sock); 
    return 0; 
}
